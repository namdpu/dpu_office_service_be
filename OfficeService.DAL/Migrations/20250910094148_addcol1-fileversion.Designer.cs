// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OfficeService.DAL;

#nullable disable

namespace OfficeService.DAL.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250910094148_addcol1-fileversion")]
    partial class addcol1fileversion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OfficeService.DAL.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_id");

                    b.Property<string>("CallBackUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("callback_url");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_type");

                    b.Property<string>("FileKey")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("file_key");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("file_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("key");

                    b.Property<string>("OriginUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("origin_url");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("file", "public");
                });

            modelBuilder.Entity("OfficeService.DAL.Entities.FileVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("Actions")
                        .HasColumnType("jsonb")
                        .HasColumnName("actions");

                    b.Property<string>("ChangesUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("changes_url");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_dateTime");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_userId");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<int?>("ForceSaveType")
                        .HasColumnType("integer")
                        .HasColumnName("force_save_type");

                    b.Property<JsonDocument>("Histotry")
                        .HasColumnType("jsonb")
                        .HasColumnName("histotry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastSave")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_save");

                    b.Property<Guid?>("RefId")
                        .HasColumnType("uuid")
                        .HasColumnName("ref_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SystemVersion")
                        .HasColumnType("integer")
                        .HasColumnName("system_version");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_dateTime");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_userId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("url");

                    b.Property<JsonDocument>("Users")
                        .HasColumnType("jsonb")
                        .HasColumnName("users");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("file_version", "public");
                });

            modelBuilder.Entity("OfficeService.DAL.Entities.FileVersion", b =>
                {
                    b.HasOne("OfficeService.DAL.Entities.File", "File")
                        .WithMany("FileVersions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("OfficeService.DAL.Entities.File", b =>
                {
                    b.Navigation("FileVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
